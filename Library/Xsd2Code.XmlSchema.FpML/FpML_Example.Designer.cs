// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.2.107.0. www.xsd2code.com
//    {"TargetFramework":"Net45","NameSpace":"Xsd2Code.XMLSchema.FpML","Properties":{"LazyLoading":true},"ClassParams":{},"Serialization":{"ShouldSerialize":{},"AdditionalSerializers":{"Json":true,"Bson":true,"MessagePack":true},"XmlSerializerEvent":{},"XmlOutput":{},"JsonOutput":{},"Enabled":true},"Miscellaneous":{}}
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace Xsd2Code.XMLSchema.FpML
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Runtime.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Xml;
    using Newtonsoft.Json.Bson;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using MsgPack.Serialization;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;


    [DebuggerStepThrough]
    public partial class requestAllocation
    {
        #region Private fields
        private requestAllocationHeader _header;
        private bool _isCorrection;
        private requestAllocationCorrelationId _correlationId;
        private byte _sequenceNumber;
        private requestAllocationBlockTradeIdentifier _blockTradeIdentifier;
        private List<requestAllocationAllocation> _allocations;
        private List<requestAllocationParty> _party;
        private List<requestAllocationAccount> _account;
        private string _fpmlVersion;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public requestAllocationHeader header
        {
            get
            {
                if ((_header == null))
                {
                    _header = new requestAllocationHeader();
                }
                return _header;
            }
            set
            {
                _header = value;
            }
        }

        public bool isCorrection
        {
            get
            {
                return _isCorrection;
            }
            set
            {
                _isCorrection = value;
            }
        }

        public requestAllocationCorrelationId correlationId
        {
            get
            {
                if ((_correlationId == null))
                {
                    _correlationId = new requestAllocationCorrelationId();
                }
                return _correlationId;
            }
            set
            {
                _correlationId = value;
            }
        }

        public byte sequenceNumber
        {
            get
            {
                return _sequenceNumber;
            }
            set
            {
                _sequenceNumber = value;
            }
        }

        public requestAllocationBlockTradeIdentifier blockTradeIdentifier
        {
            get
            {
                if ((_blockTradeIdentifier == null))
                {
                    _blockTradeIdentifier = new requestAllocationBlockTradeIdentifier();
                }
                return _blockTradeIdentifier;
            }
            set
            {
                _blockTradeIdentifier = value;
            }
        }

        public List<requestAllocationAllocation> allocations
        {
            get
            {
                if ((_allocations == null))
                {
                    _allocations = new List<requestAllocationAllocation>();
                }
                return _allocations;
            }
            set
            {
                _allocations = value;
            }
        }

        public List<requestAllocationParty> party
        {
            get
            {
                if ((_party == null))
                {
                    _party = new List<requestAllocationParty>();
                }
                return _party;
            }
            set
            {
                _party = value;
            }
        }

        public List<requestAllocationAccount> account
        {
            get
            {
                if ((_account == null))
                {
                    _account = new List<requestAllocationAccount>();
                }
                return _account;
            }
            set
            {
                _account = value;
            }
        }

        public string fpmlVersion
        {
            get
            {
                return _fpmlVersion;
            }
            set
            {
                _fpmlVersion = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocation));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocation>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocation object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocation object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocation obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocation);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocation obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocation Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocation)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocation Deserialize(Stream s)
        {
            return ((requestAllocation)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocation object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocation obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocation);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocation obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocation LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocation object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocation object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocation obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocation);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocation obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocation DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocation>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocation LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocation object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocation object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocation obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocation);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocation obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocation DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocation>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocation LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocation object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocation object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocation obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocation);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocation obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocation object
        /// </summary>
        public static requestAllocation DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocation)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocation LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationHeader
    {
        #region Private fields
        private requestAllocationHeaderMessageId _messageId;
        private string _sentBy;
        private System.DateTime _creationTimestamp;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public requestAllocationHeaderMessageId messageId
        {
            get
            {
                if ((_messageId == null))
                {
                    _messageId = new requestAllocationHeaderMessageId();
                }
                return _messageId;
            }
            set
            {
                _messageId = value;
            }
        }

        public string sentBy
        {
            get
            {
                return _sentBy;
            }
            set
            {
                _sentBy = value;
            }
        }

        public System.DateTime creationTimestamp
        {
            get
            {
                return _creationTimestamp;
            }
            set
            {
                _creationTimestamp = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationHeader));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationHeader>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationHeader object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationHeader object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationHeader obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationHeader);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationHeader obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationHeader Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationHeader)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationHeader Deserialize(Stream s)
        {
            return ((requestAllocationHeader)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationHeader object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationHeader object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationHeader obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationHeader);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationHeader obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationHeader LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationHeader object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationHeader object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationHeader obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationHeader);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationHeader obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationHeader DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationHeader>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationHeader LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationHeader object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationHeader object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationHeader obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationHeader);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationHeader obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationHeader DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationHeader>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationHeader LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationHeader object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationHeader object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationHeader obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationHeader);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationHeader obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationHeader object
        /// </summary>
        public static requestAllocationHeader DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationHeader)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationHeader LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationHeaderMessageId
    {
        #region Private fields
        private string _messageIdScheme;
        private uint _value;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public string messageIdScheme
        {
            get
            {
                return _messageIdScheme;
            }
            set
            {
                _messageIdScheme = value;
            }
        }

        public uint Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationHeaderMessageId));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationHeaderMessageId>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationHeaderMessageId object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationHeaderMessageId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationHeaderMessageId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationHeaderMessageId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationHeaderMessageId);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationHeaderMessageId obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationHeaderMessageId Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationHeaderMessageId)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationHeaderMessageId Deserialize(Stream s)
        {
            return ((requestAllocationHeaderMessageId)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationHeaderMessageId object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationHeaderMessageId object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationHeaderMessageId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationHeaderMessageId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationHeaderMessageId);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationHeaderMessageId obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationHeaderMessageId LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationHeaderMessageId object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationHeaderMessageId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationHeaderMessageId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationHeaderMessageId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationHeaderMessageId);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationHeaderMessageId obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationHeaderMessageId DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationHeaderMessageId>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationHeaderMessageId LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationHeaderMessageId object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationHeaderMessageId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationHeaderMessageId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationHeaderMessageId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationHeaderMessageId);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationHeaderMessageId obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationHeaderMessageId DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationHeaderMessageId>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationHeaderMessageId LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationHeaderMessageId object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationHeaderMessageId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationHeaderMessageId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationHeaderMessageId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationHeaderMessageId);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationHeaderMessageId obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationHeaderMessageId object
        /// </summary>
        public static requestAllocationHeaderMessageId DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationHeaderMessageId)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationHeaderMessageId LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationCorrelationId
    {
        #region Private fields
        private string _correlationIdScheme;
        private uint _value;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public string correlationIdScheme
        {
            get
            {
                return _correlationIdScheme;
            }
            set
            {
                _correlationIdScheme = value;
            }
        }

        public uint Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationCorrelationId));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationCorrelationId>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationCorrelationId object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationCorrelationId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationCorrelationId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationCorrelationId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationCorrelationId);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationCorrelationId obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationCorrelationId Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationCorrelationId)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationCorrelationId Deserialize(Stream s)
        {
            return ((requestAllocationCorrelationId)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationCorrelationId object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationCorrelationId object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationCorrelationId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationCorrelationId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationCorrelationId);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationCorrelationId obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationCorrelationId LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationCorrelationId object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationCorrelationId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationCorrelationId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationCorrelationId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationCorrelationId);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationCorrelationId obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationCorrelationId DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationCorrelationId>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationCorrelationId LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationCorrelationId object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationCorrelationId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationCorrelationId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationCorrelationId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationCorrelationId);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationCorrelationId obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationCorrelationId DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationCorrelationId>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationCorrelationId LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationCorrelationId object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationCorrelationId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationCorrelationId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationCorrelationId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationCorrelationId);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationCorrelationId obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationCorrelationId object
        /// </summary>
        public static requestAllocationCorrelationId DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationCorrelationId)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationCorrelationId LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationBlockTradeIdentifier
    {
        #region Private fields
        private requestAllocationBlockTradeIdentifierPartyReference _partyReference;
        private requestAllocationBlockTradeIdentifierTradeId _tradeId;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public requestAllocationBlockTradeIdentifierPartyReference partyReference
        {
            get
            {
                if ((_partyReference == null))
                {
                    _partyReference = new requestAllocationBlockTradeIdentifierPartyReference();
                }
                return _partyReference;
            }
            set
            {
                _partyReference = value;
            }
        }

        public requestAllocationBlockTradeIdentifierTradeId tradeId
        {
            get
            {
                if ((_tradeId == null))
                {
                    _tradeId = new requestAllocationBlockTradeIdentifierTradeId();
                }
                return _tradeId;
            }
            set
            {
                _tradeId = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationBlockTradeIdentifier));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationBlockTradeIdentifier>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationBlockTradeIdentifier object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationBlockTradeIdentifier object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationBlockTradeIdentifier object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationBlockTradeIdentifier obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationBlockTradeIdentifier);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationBlockTradeIdentifier obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationBlockTradeIdentifier Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationBlockTradeIdentifier)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationBlockTradeIdentifier Deserialize(Stream s)
        {
            return ((requestAllocationBlockTradeIdentifier)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationBlockTradeIdentifier object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationBlockTradeIdentifier object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationBlockTradeIdentifier object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationBlockTradeIdentifier obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationBlockTradeIdentifier);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationBlockTradeIdentifier obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationBlockTradeIdentifier LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationBlockTradeIdentifier object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationBlockTradeIdentifier object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationBlockTradeIdentifier object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationBlockTradeIdentifier obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationBlockTradeIdentifier);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationBlockTradeIdentifier obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationBlockTradeIdentifier DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationBlockTradeIdentifier>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationBlockTradeIdentifier LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationBlockTradeIdentifier object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationBlockTradeIdentifier object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationBlockTradeIdentifier object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationBlockTradeIdentifier obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationBlockTradeIdentifier);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationBlockTradeIdentifier obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationBlockTradeIdentifier DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationBlockTradeIdentifier>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationBlockTradeIdentifier LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationBlockTradeIdentifier object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationBlockTradeIdentifier object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationBlockTradeIdentifier object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationBlockTradeIdentifier obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationBlockTradeIdentifier);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationBlockTradeIdentifier obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationBlockTradeIdentifier object
        /// </summary>
        public static requestAllocationBlockTradeIdentifier DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationBlockTradeIdentifier)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationBlockTradeIdentifier LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationBlockTradeIdentifierPartyReference
    {
        #region Private fields
        private string _href;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public string href
        {
            get
            {
                return _href;
            }
            set
            {
                _href = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationBlockTradeIdentifierPartyReference));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationBlockTradeIdentifierPartyReference>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationBlockTradeIdentifierPartyReference object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationBlockTradeIdentifierPartyReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationBlockTradeIdentifierPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationBlockTradeIdentifierPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationBlockTradeIdentifierPartyReference);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationBlockTradeIdentifierPartyReference obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationBlockTradeIdentifierPartyReference Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationBlockTradeIdentifierPartyReference)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationBlockTradeIdentifierPartyReference Deserialize(Stream s)
        {
            return ((requestAllocationBlockTradeIdentifierPartyReference)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationBlockTradeIdentifierPartyReference object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationBlockTradeIdentifierPartyReference object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationBlockTradeIdentifierPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationBlockTradeIdentifierPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationBlockTradeIdentifierPartyReference);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationBlockTradeIdentifierPartyReference obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationBlockTradeIdentifierPartyReference LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationBlockTradeIdentifierPartyReference object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationBlockTradeIdentifierPartyReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationBlockTradeIdentifierPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationBlockTradeIdentifierPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationBlockTradeIdentifierPartyReference);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationBlockTradeIdentifierPartyReference obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationBlockTradeIdentifierPartyReference DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationBlockTradeIdentifierPartyReference>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationBlockTradeIdentifierPartyReference LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationBlockTradeIdentifierPartyReference object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationBlockTradeIdentifierPartyReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationBlockTradeIdentifierPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationBlockTradeIdentifierPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationBlockTradeIdentifierPartyReference);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationBlockTradeIdentifierPartyReference obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationBlockTradeIdentifierPartyReference DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationBlockTradeIdentifierPartyReference>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationBlockTradeIdentifierPartyReference LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationBlockTradeIdentifierPartyReference object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationBlockTradeIdentifierPartyReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationBlockTradeIdentifierPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationBlockTradeIdentifierPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationBlockTradeIdentifierPartyReference);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationBlockTradeIdentifierPartyReference obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationBlockTradeIdentifierPartyReference object
        /// </summary>
        public static requestAllocationBlockTradeIdentifierPartyReference DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationBlockTradeIdentifierPartyReference)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationBlockTradeIdentifierPartyReference LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationBlockTradeIdentifierTradeId
    {
        #region Private fields
        private string _tradeIdScheme;
        private ushort _value;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public string tradeIdScheme
        {
            get
            {
                return _tradeIdScheme;
            }
            set
            {
                _tradeIdScheme = value;
            }
        }

        public ushort Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationBlockTradeIdentifierTradeId));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationBlockTradeIdentifierTradeId>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationBlockTradeIdentifierTradeId object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationBlockTradeIdentifierTradeId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationBlockTradeIdentifierTradeId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationBlockTradeIdentifierTradeId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationBlockTradeIdentifierTradeId);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationBlockTradeIdentifierTradeId obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationBlockTradeIdentifierTradeId Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationBlockTradeIdentifierTradeId)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationBlockTradeIdentifierTradeId Deserialize(Stream s)
        {
            return ((requestAllocationBlockTradeIdentifierTradeId)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationBlockTradeIdentifierTradeId object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationBlockTradeIdentifierTradeId object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationBlockTradeIdentifierTradeId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationBlockTradeIdentifierTradeId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationBlockTradeIdentifierTradeId);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationBlockTradeIdentifierTradeId obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationBlockTradeIdentifierTradeId LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationBlockTradeIdentifierTradeId object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationBlockTradeIdentifierTradeId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationBlockTradeIdentifierTradeId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationBlockTradeIdentifierTradeId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationBlockTradeIdentifierTradeId);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationBlockTradeIdentifierTradeId obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationBlockTradeIdentifierTradeId DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationBlockTradeIdentifierTradeId>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationBlockTradeIdentifierTradeId LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationBlockTradeIdentifierTradeId object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationBlockTradeIdentifierTradeId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationBlockTradeIdentifierTradeId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationBlockTradeIdentifierTradeId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationBlockTradeIdentifierTradeId);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationBlockTradeIdentifierTradeId obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationBlockTradeIdentifierTradeId DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationBlockTradeIdentifierTradeId>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationBlockTradeIdentifierTradeId LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationBlockTradeIdentifierTradeId object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationBlockTradeIdentifierTradeId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationBlockTradeIdentifierTradeId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationBlockTradeIdentifierTradeId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationBlockTradeIdentifierTradeId);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationBlockTradeIdentifierTradeId obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationBlockTradeIdentifierTradeId object
        /// </summary>
        public static requestAllocationBlockTradeIdentifierTradeId DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationBlockTradeIdentifierTradeId)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationBlockTradeIdentifierTradeId LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationAllocation
    {
        #region Private fields
        private requestAllocationAllocationAllocationTradeId _allocationTradeId;
        private requestAllocationAllocationPartyReference _partyReference;
        private requestAllocationAllocationAccountReference _accountReference;
        private decimal _allocatedFraction;
        private requestAllocationAllocationCollateral _collateral;
        private requestAllocationAllocationCreditChargeAmount _creditChargeAmount;
        private List<requestAllocationAllocationApproval> _approvals;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public requestAllocationAllocationAllocationTradeId allocationTradeId
        {
            get
            {
                if ((_allocationTradeId == null))
                {
                    _allocationTradeId = new requestAllocationAllocationAllocationTradeId();
                }
                return _allocationTradeId;
            }
            set
            {
                _allocationTradeId = value;
            }
        }

        public requestAllocationAllocationPartyReference partyReference
        {
            get
            {
                if ((_partyReference == null))
                {
                    _partyReference = new requestAllocationAllocationPartyReference();
                }
                return _partyReference;
            }
            set
            {
                _partyReference = value;
            }
        }

        public requestAllocationAllocationAccountReference accountReference
        {
            get
            {
                if ((_accountReference == null))
                {
                    _accountReference = new requestAllocationAllocationAccountReference();
                }
                return _accountReference;
            }
            set
            {
                _accountReference = value;
            }
        }

        public decimal allocatedFraction
        {
            get
            {
                return _allocatedFraction;
            }
            set
            {
                _allocatedFraction = value;
            }
        }

        public requestAllocationAllocationCollateral collateral
        {
            get
            {
                if ((_collateral == null))
                {
                    _collateral = new requestAllocationAllocationCollateral();
                }
                return _collateral;
            }
            set
            {
                _collateral = value;
            }
        }

        public requestAllocationAllocationCreditChargeAmount creditChargeAmount
        {
            get
            {
                if ((_creditChargeAmount == null))
                {
                    _creditChargeAmount = new requestAllocationAllocationCreditChargeAmount();
                }
                return _creditChargeAmount;
            }
            set
            {
                _creditChargeAmount = value;
            }
        }

        public List<requestAllocationAllocationApproval> approvals
        {
            get
            {
                if ((_approvals == null))
                {
                    _approvals = new List<requestAllocationAllocationApproval>();
                }
                return _approvals;
            }
            set
            {
                _approvals = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationAllocation));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationAllocation>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationAllocation object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocation object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationAllocation obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocation);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationAllocation obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationAllocation Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationAllocation)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationAllocation Deserialize(Stream s)
        {
            return ((requestAllocationAllocation)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationAllocation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationAllocation object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationAllocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationAllocation obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocation);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationAllocation obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationAllocation LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocation object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocation object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationAllocation obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocation);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationAllocation obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationAllocation DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationAllocation>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocation LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocation object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationAllocation object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationAllocation obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocation);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationAllocation obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationAllocation DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationAllocation>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocation LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationAllocation object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocation object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocation obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocation);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocation obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationAllocation object
        /// </summary>
        public static requestAllocationAllocation DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationAllocation)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationAllocation LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationAllocationAllocationTradeId
    {
        #region Private fields
        private requestAllocationAllocationAllocationTradeIdPartyReference _partyReference;
        private requestAllocationAllocationAllocationTradeIdTradeId _tradeId;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public requestAllocationAllocationAllocationTradeIdPartyReference partyReference
        {
            get
            {
                if ((_partyReference == null))
                {
                    _partyReference = new requestAllocationAllocationAllocationTradeIdPartyReference();
                }
                return _partyReference;
            }
            set
            {
                _partyReference = value;
            }
        }

        public requestAllocationAllocationAllocationTradeIdTradeId tradeId
        {
            get
            {
                if ((_tradeId == null))
                {
                    _tradeId = new requestAllocationAllocationAllocationTradeIdTradeId();
                }
                return _tradeId;
            }
            set
            {
                _tradeId = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationAllocationAllocationTradeId));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationAllocationAllocationTradeId>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationAllocationAllocationTradeId object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationAllocationTradeId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationAllocationTradeId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationAllocationAllocationTradeId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationAllocationTradeId);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationAllocationAllocationTradeId obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationAllocationAllocationTradeId Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationAllocationAllocationTradeId)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationAllocationAllocationTradeId Deserialize(Stream s)
        {
            return ((requestAllocationAllocationAllocationTradeId)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationAllocationAllocationTradeId object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationAllocationAllocationTradeId object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationAllocationTradeId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationAllocationAllocationTradeId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationAllocationTradeId);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationAllocationAllocationTradeId obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationAllocationAllocationTradeId LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationAllocationTradeId object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationAllocationTradeId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationAllocationTradeId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationAllocationAllocationTradeId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationAllocationTradeId);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationAllocationAllocationTradeId obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationAllocationAllocationTradeId DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationAllocationAllocationTradeId>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationAllocationTradeId LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationAllocationTradeId object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationAllocationTradeId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationAllocationTradeId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationAllocationAllocationTradeId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationAllocationTradeId);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationAllocationAllocationTradeId obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationAllocationAllocationTradeId DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationAllocationAllocationTradeId>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationAllocationTradeId LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationAllocationAllocationTradeId object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationAllocationTradeId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationAllocationTradeId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationAllocationTradeId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationAllocationTradeId);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationAllocationTradeId obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationAllocationAllocationTradeId object
        /// </summary>
        public static requestAllocationAllocationAllocationTradeId DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationAllocationAllocationTradeId)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationAllocationAllocationTradeId LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationAllocationAllocationTradeIdPartyReference
    {
        #region Private fields
        private string _href;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public string href
        {
            get
            {
                return _href;
            }
            set
            {
                _href = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationAllocationAllocationTradeIdPartyReference));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationAllocationAllocationTradeIdPartyReference>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationAllocationAllocationTradeIdPartyReference object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationAllocationTradeIdPartyReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationAllocationTradeIdPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationAllocationAllocationTradeIdPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationAllocationTradeIdPartyReference);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationAllocationAllocationTradeIdPartyReference obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationAllocationAllocationTradeIdPartyReference Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationAllocationAllocationTradeIdPartyReference)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationAllocationAllocationTradeIdPartyReference Deserialize(Stream s)
        {
            return ((requestAllocationAllocationAllocationTradeIdPartyReference)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationAllocationAllocationTradeIdPartyReference object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationAllocationAllocationTradeIdPartyReference object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationAllocationTradeIdPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationAllocationAllocationTradeIdPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationAllocationTradeIdPartyReference);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationAllocationAllocationTradeIdPartyReference obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationAllocationAllocationTradeIdPartyReference LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationAllocationTradeIdPartyReference object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationAllocationTradeIdPartyReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationAllocationTradeIdPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationAllocationAllocationTradeIdPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationAllocationTradeIdPartyReference);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationAllocationAllocationTradeIdPartyReference obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationAllocationAllocationTradeIdPartyReference DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationAllocationAllocationTradeIdPartyReference>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationAllocationTradeIdPartyReference LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationAllocationTradeIdPartyReference object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationAllocationTradeIdPartyReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationAllocationTradeIdPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationAllocationAllocationTradeIdPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationAllocationTradeIdPartyReference);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationAllocationAllocationTradeIdPartyReference obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationAllocationAllocationTradeIdPartyReference DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationAllocationAllocationTradeIdPartyReference>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationAllocationTradeIdPartyReference LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationAllocationAllocationTradeIdPartyReference object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationAllocationTradeIdPartyReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationAllocationTradeIdPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationAllocationTradeIdPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationAllocationTradeIdPartyReference);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationAllocationTradeIdPartyReference obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationAllocationAllocationTradeIdPartyReference object
        /// </summary>
        public static requestAllocationAllocationAllocationTradeIdPartyReference DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationAllocationAllocationTradeIdPartyReference)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationAllocationAllocationTradeIdPartyReference LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationAllocationAllocationTradeIdTradeId
    {
        #region Private fields
        private string _tradeIdScheme;
        private ushort _value;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public string tradeIdScheme
        {
            get
            {
                return _tradeIdScheme;
            }
            set
            {
                _tradeIdScheme = value;
            }
        }

        public ushort Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationAllocationAllocationTradeIdTradeId));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationAllocationAllocationTradeIdTradeId>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationAllocationAllocationTradeIdTradeId object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationAllocationTradeIdTradeId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationAllocationTradeIdTradeId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationAllocationAllocationTradeIdTradeId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationAllocationTradeIdTradeId);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationAllocationAllocationTradeIdTradeId obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationAllocationAllocationTradeIdTradeId Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationAllocationAllocationTradeIdTradeId)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationAllocationAllocationTradeIdTradeId Deserialize(Stream s)
        {
            return ((requestAllocationAllocationAllocationTradeIdTradeId)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationAllocationAllocationTradeIdTradeId object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationAllocationAllocationTradeIdTradeId object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationAllocationTradeIdTradeId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationAllocationAllocationTradeIdTradeId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationAllocationTradeIdTradeId);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationAllocationAllocationTradeIdTradeId obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationAllocationAllocationTradeIdTradeId LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationAllocationTradeIdTradeId object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationAllocationTradeIdTradeId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationAllocationTradeIdTradeId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationAllocationAllocationTradeIdTradeId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationAllocationTradeIdTradeId);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationAllocationAllocationTradeIdTradeId obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationAllocationAllocationTradeIdTradeId DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationAllocationAllocationTradeIdTradeId>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationAllocationTradeIdTradeId LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationAllocationTradeIdTradeId object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationAllocationTradeIdTradeId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationAllocationTradeIdTradeId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationAllocationAllocationTradeIdTradeId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationAllocationTradeIdTradeId);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationAllocationAllocationTradeIdTradeId obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationAllocationAllocationTradeIdTradeId DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationAllocationAllocationTradeIdTradeId>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationAllocationTradeIdTradeId LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationAllocationAllocationTradeIdTradeId object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationAllocationTradeIdTradeId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationAllocationTradeIdTradeId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationAllocationTradeIdTradeId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationAllocationTradeIdTradeId);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationAllocationTradeIdTradeId obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationAllocationAllocationTradeIdTradeId object
        /// </summary>
        public static requestAllocationAllocationAllocationTradeIdTradeId DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationAllocationAllocationTradeIdTradeId)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationAllocationAllocationTradeIdTradeId LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationAllocationPartyReference
    {
        #region Private fields
        private string _href;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public string href
        {
            get
            {
                return _href;
            }
            set
            {
                _href = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationAllocationPartyReference));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationAllocationPartyReference>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationAllocationPartyReference object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationPartyReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationAllocationPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationPartyReference);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationAllocationPartyReference obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationAllocationPartyReference Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationAllocationPartyReference)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationAllocationPartyReference Deserialize(Stream s)
        {
            return ((requestAllocationAllocationPartyReference)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationAllocationPartyReference object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationAllocationPartyReference object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationAllocationPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationPartyReference);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationAllocationPartyReference obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationAllocationPartyReference LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationPartyReference object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationPartyReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationAllocationPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationPartyReference);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationAllocationPartyReference obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationAllocationPartyReference DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationAllocationPartyReference>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationPartyReference LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationPartyReference object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationPartyReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationAllocationPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationPartyReference);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationAllocationPartyReference obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationAllocationPartyReference DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationAllocationPartyReference>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationPartyReference LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationAllocationPartyReference object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationPartyReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationPartyReference);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationPartyReference obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationAllocationPartyReference object
        /// </summary>
        public static requestAllocationAllocationPartyReference DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationAllocationPartyReference)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationAllocationPartyReference LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationAllocationAccountReference
    {
        #region Private fields
        private string _href;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public string href
        {
            get
            {
                return _href;
            }
            set
            {
                _href = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationAllocationAccountReference));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationAllocationAccountReference>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationAllocationAccountReference object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationAccountReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationAccountReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationAllocationAccountReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationAccountReference);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationAllocationAccountReference obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationAllocationAccountReference Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationAllocationAccountReference)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationAllocationAccountReference Deserialize(Stream s)
        {
            return ((requestAllocationAllocationAccountReference)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationAllocationAccountReference object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationAllocationAccountReference object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationAccountReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationAllocationAccountReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationAccountReference);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationAllocationAccountReference obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationAllocationAccountReference LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationAccountReference object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationAccountReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationAccountReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationAllocationAccountReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationAccountReference);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationAllocationAccountReference obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationAllocationAccountReference DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationAllocationAccountReference>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationAccountReference LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationAccountReference object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationAccountReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationAccountReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationAllocationAccountReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationAccountReference);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationAllocationAccountReference obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationAllocationAccountReference DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationAllocationAccountReference>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationAccountReference LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationAllocationAccountReference object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationAccountReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationAccountReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationAccountReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationAccountReference);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationAccountReference obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationAllocationAccountReference object
        /// </summary>
        public static requestAllocationAllocationAccountReference DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationAllocationAccountReference)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationAllocationAccountReference LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationAllocationCollateral
    {
        #region Private fields
        private requestAllocationAllocationCollateralIndependentAmount _independentAmount;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public requestAllocationAllocationCollateralIndependentAmount independentAmount
        {
            get
            {
                if ((_independentAmount == null))
                {
                    _independentAmount = new requestAllocationAllocationCollateralIndependentAmount();
                }
                return _independentAmount;
            }
            set
            {
                _independentAmount = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationAllocationCollateral));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationAllocationCollateral>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationAllocationCollateral object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateral object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateral object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationAllocationCollateral obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateral);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationAllocationCollateral obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationAllocationCollateral Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationAllocationCollateral)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateral Deserialize(Stream s)
        {
            return ((requestAllocationAllocationCollateral)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationAllocationCollateral object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationAllocationCollateral object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateral object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationAllocationCollateral obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateral);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationAllocationCollateral obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationAllocationCollateral LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationCollateral object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateral object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateral object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationAllocationCollateral obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateral);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationAllocationCollateral obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationAllocationCollateral DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationAllocationCollateral>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateral LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationCollateral object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateral object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateral object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationAllocationCollateral obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateral);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationAllocationCollateral obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationAllocationCollateral DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationAllocationCollateral>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateral LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationAllocationCollateral object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateral object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateral object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationCollateral obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateral);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationCollateral obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationAllocationCollateral object
        /// </summary>
        public static requestAllocationAllocationCollateral DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationAllocationCollateral)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateral LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationAllocationCollateralIndependentAmount
    {
        #region Private fields
        private requestAllocationAllocationCollateralIndependentAmountPayerPartyReference _payerPartyReference;
        private requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference _receiverPartyReference;
        private requestAllocationAllocationCollateralIndependentAmountPaymentDetail _paymentDetail;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public requestAllocationAllocationCollateralIndependentAmountPayerPartyReference payerPartyReference
        {
            get
            {
                if ((_payerPartyReference == null))
                {
                    _payerPartyReference = new requestAllocationAllocationCollateralIndependentAmountPayerPartyReference();
                }
                return _payerPartyReference;
            }
            set
            {
                _payerPartyReference = value;
            }
        }

        public requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference receiverPartyReference
        {
            get
            {
                if ((_receiverPartyReference == null))
                {
                    _receiverPartyReference = new requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference();
                }
                return _receiverPartyReference;
            }
            set
            {
                _receiverPartyReference = value;
            }
        }

        public requestAllocationAllocationCollateralIndependentAmountPaymentDetail paymentDetail
        {
            get
            {
                if ((_paymentDetail == null))
                {
                    _paymentDetail = new requestAllocationAllocationCollateralIndependentAmountPaymentDetail();
                }
                return _paymentDetail;
            }
            set
            {
                _paymentDetail = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationAllocationCollateralIndependentAmount));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationAllocationCollateralIndependentAmount>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationAllocationCollateralIndependentAmount object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateralIndependentAmount object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationAllocationCollateralIndependentAmount obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmount);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationAllocationCollateralIndependentAmount obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationAllocationCollateralIndependentAmount Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationAllocationCollateralIndependentAmount)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateralIndependentAmount Deserialize(Stream s)
        {
            return ((requestAllocationAllocationCollateralIndependentAmount)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationAllocationCollateralIndependentAmount object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationAllocationCollateralIndependentAmount object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationAllocationCollateralIndependentAmount obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmount);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationAllocationCollateralIndependentAmount obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationAllocationCollateralIndependentAmount LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationCollateralIndependentAmount object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateralIndependentAmount object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationAllocationCollateralIndependentAmount obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmount);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationAllocationCollateralIndependentAmount obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationAllocationCollateralIndependentAmount DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationAllocationCollateralIndependentAmount>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateralIndependentAmount LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationCollateralIndependentAmount object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateralIndependentAmount object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationAllocationCollateralIndependentAmount obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmount);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationAllocationCollateralIndependentAmount obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationAllocationCollateralIndependentAmount DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationAllocationCollateralIndependentAmount>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateralIndependentAmount LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationAllocationCollateralIndependentAmount object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateralIndependentAmount object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationCollateralIndependentAmount obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmount);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationCollateralIndependentAmount obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationAllocationCollateralIndependentAmount object
        /// </summary>
        public static requestAllocationAllocationCollateralIndependentAmount DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationAllocationCollateralIndependentAmount)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateralIndependentAmount LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationAllocationCollateralIndependentAmountPayerPartyReference
    {
        #region Private fields
        private string _href;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public string href
        {
            get
            {
                return _href;
            }
            set
            {
                _href = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationAllocationCollateralIndependentAmountPayerPartyReference));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationAllocationCollateralIndependentAmountPayerPartyReference>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationAllocationCollateralIndependentAmountPayerPartyReference object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateralIndependentAmountPayerPartyReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmountPayerPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationAllocationCollateralIndependentAmountPayerPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmountPayerPartyReference);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationAllocationCollateralIndependentAmountPayerPartyReference obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationAllocationCollateralIndependentAmountPayerPartyReference Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationAllocationCollateralIndependentAmountPayerPartyReference)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateralIndependentAmountPayerPartyReference Deserialize(Stream s)
        {
            return ((requestAllocationAllocationCollateralIndependentAmountPayerPartyReference)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationAllocationCollateralIndependentAmountPayerPartyReference object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationAllocationCollateralIndependentAmountPayerPartyReference object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmountPayerPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationAllocationCollateralIndependentAmountPayerPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmountPayerPartyReference);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationAllocationCollateralIndependentAmountPayerPartyReference obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationAllocationCollateralIndependentAmountPayerPartyReference LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationCollateralIndependentAmountPayerPartyReference object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateralIndependentAmountPayerPartyReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmountPayerPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationAllocationCollateralIndependentAmountPayerPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmountPayerPartyReference);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationAllocationCollateralIndependentAmountPayerPartyReference obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationAllocationCollateralIndependentAmountPayerPartyReference DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationAllocationCollateralIndependentAmountPayerPartyReference>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateralIndependentAmountPayerPartyReference LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationCollateralIndependentAmountPayerPartyReference object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateralIndependentAmountPayerPartyReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmountPayerPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationAllocationCollateralIndependentAmountPayerPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmountPayerPartyReference);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationAllocationCollateralIndependentAmountPayerPartyReference obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationAllocationCollateralIndependentAmountPayerPartyReference DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationAllocationCollateralIndependentAmountPayerPartyReference>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateralIndependentAmountPayerPartyReference LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationAllocationCollateralIndependentAmountPayerPartyReference object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateralIndependentAmountPayerPartyReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmountPayerPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationCollateralIndependentAmountPayerPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmountPayerPartyReference);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationCollateralIndependentAmountPayerPartyReference obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationAllocationCollateralIndependentAmountPayerPartyReference object
        /// </summary>
        public static requestAllocationAllocationCollateralIndependentAmountPayerPartyReference DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationAllocationCollateralIndependentAmountPayerPartyReference)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateralIndependentAmountPayerPartyReference LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference
    {
        #region Private fields
        private string _href;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public string href
        {
            get
            {
                return _href;
            }
            set
            {
                _href = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference Deserialize(Stream s)
        {
            return ((requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference object
        /// </summary>
        public static requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateralIndependentAmountReceiverPartyReference LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationAllocationCollateralIndependentAmountPaymentDetail
    {
        #region Private fields
        private requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount _paymentAmount;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount paymentAmount
        {
            get
            {
                if ((_paymentAmount == null))
                {
                    _paymentAmount = new requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount();
                }
                return _paymentAmount;
            }
            set
            {
                _paymentAmount = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationAllocationCollateralIndependentAmountPaymentDetail));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationAllocationCollateralIndependentAmountPaymentDetail>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationAllocationCollateralIndependentAmountPaymentDetail object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateralIndependentAmountPaymentDetail object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmountPaymentDetail object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationAllocationCollateralIndependentAmountPaymentDetail obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmountPaymentDetail);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationAllocationCollateralIndependentAmountPaymentDetail obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationAllocationCollateralIndependentAmountPaymentDetail Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationAllocationCollateralIndependentAmountPaymentDetail)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateralIndependentAmountPaymentDetail Deserialize(Stream s)
        {
            return ((requestAllocationAllocationCollateralIndependentAmountPaymentDetail)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationAllocationCollateralIndependentAmountPaymentDetail object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationAllocationCollateralIndependentAmountPaymentDetail object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmountPaymentDetail object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationAllocationCollateralIndependentAmountPaymentDetail obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmountPaymentDetail);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationAllocationCollateralIndependentAmountPaymentDetail obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationAllocationCollateralIndependentAmountPaymentDetail LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationCollateralIndependentAmountPaymentDetail object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateralIndependentAmountPaymentDetail object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmountPaymentDetail object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationAllocationCollateralIndependentAmountPaymentDetail obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmountPaymentDetail);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationAllocationCollateralIndependentAmountPaymentDetail obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationAllocationCollateralIndependentAmountPaymentDetail DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationAllocationCollateralIndependentAmountPaymentDetail>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateralIndependentAmountPaymentDetail LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationCollateralIndependentAmountPaymentDetail object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateralIndependentAmountPaymentDetail object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmountPaymentDetail object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationAllocationCollateralIndependentAmountPaymentDetail obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmountPaymentDetail);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationAllocationCollateralIndependentAmountPaymentDetail obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationAllocationCollateralIndependentAmountPaymentDetail DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationAllocationCollateralIndependentAmountPaymentDetail>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateralIndependentAmountPaymentDetail LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationAllocationCollateralIndependentAmountPaymentDetail object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateralIndependentAmountPaymentDetail object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmountPaymentDetail object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationCollateralIndependentAmountPaymentDetail obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmountPaymentDetail);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationCollateralIndependentAmountPaymentDetail obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationAllocationCollateralIndependentAmountPaymentDetail object
        /// </summary>
        public static requestAllocationAllocationCollateralIndependentAmountPaymentDetail DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationAllocationCollateralIndependentAmountPaymentDetail)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateralIndependentAmountPaymentDetail LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount
    {
        #region Private fields
        private string _currency;
        private uint _amount;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public string currency
        {
            get
            {
                return _currency;
            }
            set
            {
                _currency = value;
            }
        }

        public uint amount
        {
            get
            {
                return _amount;
            }
            set
            {
                _amount = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount Deserialize(Stream s)
        {
            return ((requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount object
        /// </summary>
        public static requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCollateralIndependentAmountPaymentDetailPaymentAmount LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationAllocationCreditChargeAmount
    {
        #region Private fields
        private string _currency;
        private ushort _amount;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public string currency
        {
            get
            {
                return _currency;
            }
            set
            {
                _currency = value;
            }
        }

        public ushort amount
        {
            get
            {
                return _amount;
            }
            set
            {
                _amount = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationAllocationCreditChargeAmount));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationAllocationCreditChargeAmount>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationAllocationCreditChargeAmount object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCreditChargeAmount object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCreditChargeAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationAllocationCreditChargeAmount obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCreditChargeAmount);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationAllocationCreditChargeAmount obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationAllocationCreditChargeAmount Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationAllocationCreditChargeAmount)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCreditChargeAmount Deserialize(Stream s)
        {
            return ((requestAllocationAllocationCreditChargeAmount)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationAllocationCreditChargeAmount object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationAllocationCreditChargeAmount object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCreditChargeAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationAllocationCreditChargeAmount obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCreditChargeAmount);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationAllocationCreditChargeAmount obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationAllocationCreditChargeAmount LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationCreditChargeAmount object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCreditChargeAmount object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCreditChargeAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationAllocationCreditChargeAmount obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCreditChargeAmount);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationAllocationCreditChargeAmount obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationAllocationCreditChargeAmount DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationAllocationCreditChargeAmount>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCreditChargeAmount LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationCreditChargeAmount object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCreditChargeAmount object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCreditChargeAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationAllocationCreditChargeAmount obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCreditChargeAmount);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationAllocationCreditChargeAmount obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationAllocationCreditChargeAmount DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationAllocationCreditChargeAmount>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCreditChargeAmount LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationAllocationCreditChargeAmount object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationCreditChargeAmount object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationCreditChargeAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationCreditChargeAmount obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationCreditChargeAmount);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationCreditChargeAmount obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationAllocationCreditChargeAmount object
        /// </summary>
        public static requestAllocationAllocationCreditChargeAmount DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationAllocationCreditChargeAmount)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationAllocationCreditChargeAmount LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationAllocationApproval
    {
        #region Private fields
        private string _type;
        private string _status;
        private string _approver;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public string type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }

        public string status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }

        public string approver
        {
            get
            {
                return _approver;
            }
            set
            {
                _approver = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationAllocationApproval));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationAllocationApproval>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationAllocationApproval object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationApproval object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationApproval object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationAllocationApproval obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationApproval);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationAllocationApproval obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationAllocationApproval Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationAllocationApproval)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationAllocationApproval Deserialize(Stream s)
        {
            return ((requestAllocationAllocationApproval)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationAllocationApproval object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationAllocationApproval object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationApproval object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationAllocationApproval obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationApproval);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationAllocationApproval obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationAllocationApproval LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationApproval object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationApproval object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationApproval object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationAllocationApproval obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationApproval);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationAllocationApproval obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationAllocationApproval DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationAllocationApproval>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationApproval LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAllocationApproval object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationApproval object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationApproval object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationAllocationApproval obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationApproval);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationAllocationApproval obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationAllocationApproval DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationAllocationApproval>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAllocationApproval LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationAllocationApproval object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAllocationApproval object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAllocationApproval object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationApproval obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAllocationApproval);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAllocationApproval obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationAllocationApproval object
        /// </summary>
        public static requestAllocationAllocationApproval DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationAllocationApproval)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationAllocationApproval LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationParty
    {
        #region Private fields
        private requestAllocationPartyPartyId _partyId;
        private string _partyName;
        private string _id;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public requestAllocationPartyPartyId partyId
        {
            get
            {
                if ((_partyId == null))
                {
                    _partyId = new requestAllocationPartyPartyId();
                }
                return _partyId;
            }
            set
            {
                _partyId = value;
            }
        }

        public string partyName
        {
            get
            {
                return _partyName;
            }
            set
            {
                _partyName = value;
            }
        }

        public string id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationParty));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationParty>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationParty object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationParty object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationParty object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationParty obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationParty);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationParty obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationParty Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationParty)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationParty Deserialize(Stream s)
        {
            return ((requestAllocationParty)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationParty object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationParty object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationParty object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationParty obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationParty);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationParty obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationParty LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationParty object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationParty object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationParty object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationParty obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationParty);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationParty obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationParty DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationParty>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationParty LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationParty object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationParty object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationParty object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationParty obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationParty);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationParty obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationParty DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationParty>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationParty LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationParty object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationParty object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationParty object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationParty obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationParty);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationParty obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationParty object
        /// </summary>
        public static requestAllocationParty DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationParty)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationParty LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationPartyPartyId
    {
        #region Private fields
        private string _partyIdScheme;
        private string _value;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public string partyIdScheme
        {
            get
            {
                return _partyIdScheme;
            }
            set
            {
                _partyIdScheme = value;
            }
        }

        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationPartyPartyId));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationPartyPartyId>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationPartyPartyId object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationPartyPartyId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationPartyPartyId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationPartyPartyId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationPartyPartyId);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationPartyPartyId obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationPartyPartyId Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationPartyPartyId)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationPartyPartyId Deserialize(Stream s)
        {
            return ((requestAllocationPartyPartyId)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationPartyPartyId object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationPartyPartyId object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationPartyPartyId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationPartyPartyId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationPartyPartyId);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationPartyPartyId obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationPartyPartyId LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationPartyPartyId object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationPartyPartyId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationPartyPartyId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationPartyPartyId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationPartyPartyId);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationPartyPartyId obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationPartyPartyId DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationPartyPartyId>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationPartyPartyId LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationPartyPartyId object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationPartyPartyId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationPartyPartyId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationPartyPartyId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationPartyPartyId);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationPartyPartyId obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationPartyPartyId DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationPartyPartyId>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationPartyPartyId LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationPartyPartyId object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationPartyPartyId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationPartyPartyId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationPartyPartyId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationPartyPartyId);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationPartyPartyId obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationPartyPartyId object
        /// </summary>
        public static requestAllocationPartyPartyId DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationPartyPartyId)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationPartyPartyId LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationAccount
    {
        #region Private fields
        private requestAllocationAccountAccountId _accountId;
        private string _accountName;
        private requestAllocationAccountServicingParty _servicingParty;
        private string _id;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public requestAllocationAccountAccountId accountId
        {
            get
            {
                if ((_accountId == null))
                {
                    _accountId = new requestAllocationAccountAccountId();
                }
                return _accountId;
            }
            set
            {
                _accountId = value;
            }
        }

        public string accountName
        {
            get
            {
                return _accountName;
            }
            set
            {
                _accountName = value;
            }
        }

        public requestAllocationAccountServicingParty servicingParty
        {
            get
            {
                if ((_servicingParty == null))
                {
                    _servicingParty = new requestAllocationAccountServicingParty();
                }
                return _servicingParty;
            }
            set
            {
                _servicingParty = value;
            }
        }

        public string id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationAccount));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationAccount>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationAccount object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAccount object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAccount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationAccount obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAccount);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationAccount obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationAccount Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationAccount)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationAccount Deserialize(Stream s)
        {
            return ((requestAllocationAccount)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationAccount object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationAccount object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationAccount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationAccount obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAccount);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationAccount obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationAccount LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAccount object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAccount object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAccount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationAccount obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAccount);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationAccount obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationAccount DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationAccount>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAccount LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAccount object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationAccount object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAccount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationAccount obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAccount);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationAccount obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationAccount DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationAccount>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAccount LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationAccount object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAccount object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAccount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAccount obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAccount);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAccount obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationAccount object
        /// </summary>
        public static requestAllocationAccount DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationAccount)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationAccount LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationAccountAccountId
    {
        #region Private fields
        private string _accountIdScheme;
        private string _value;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public string accountIdScheme
        {
            get
            {
                return _accountIdScheme;
            }
            set
            {
                _accountIdScheme = value;
            }
        }

        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationAccountAccountId));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationAccountAccountId>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationAccountAccountId object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAccountAccountId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAccountAccountId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationAccountAccountId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAccountAccountId);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationAccountAccountId obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationAccountAccountId Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationAccountAccountId)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationAccountAccountId Deserialize(Stream s)
        {
            return ((requestAllocationAccountAccountId)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationAccountAccountId object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationAccountAccountId object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationAccountAccountId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationAccountAccountId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAccountAccountId);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationAccountAccountId obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationAccountAccountId LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAccountAccountId object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAccountAccountId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAccountAccountId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationAccountAccountId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAccountAccountId);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationAccountAccountId obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationAccountAccountId DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationAccountAccountId>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAccountAccountId LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAccountAccountId object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationAccountAccountId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAccountAccountId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationAccountAccountId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAccountAccountId);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationAccountAccountId obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationAccountAccountId DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationAccountAccountId>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAccountAccountId LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationAccountAccountId object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAccountAccountId object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAccountAccountId object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAccountAccountId obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAccountAccountId);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAccountAccountId obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationAccountAccountId object
        /// </summary>
        public static requestAllocationAccountAccountId DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationAccountAccountId)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationAccountAccountId LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }

    [DebuggerStepThrough]
    public partial class requestAllocationAccountServicingParty
    {
        #region Private fields
        private string _href;
        private static XmlSerializer _serializerXml;
        private static JsonSerializer _serializerBson;
        private static MessagePackSerializer _serializerMsPack;
        #endregion

        public string href
        {
            get
            {
                return _href;
            }
            set
            {
                _href = value;
            }
        }

        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(requestAllocationAccountServicingParty));
                }
                return _serializerXml;
            }
        }

        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }

        private static MessagePackSerializer SerializerMsPack
        {
            get
            {
                if ((_serializerMsPack == null))
                {
                    _serializerMsPack = MsgPack.Serialization.MessagePackSerializer.Get<requestAllocationAccountServicingParty>(new SerializationContext().SerializationMethod = SerializationMethod.Map);
                }
                return _serializerMsPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize requestAllocationAccountServicingParty object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAccountServicingParty object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAccountServicingParty object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out requestAllocationAccountServicingParty obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAccountServicingParty);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out requestAllocationAccountServicingParty obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static requestAllocationAccountServicingParty Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((requestAllocationAccountServicingParty)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static requestAllocationAccountServicingParty Deserialize(Stream s)
        {
            return ((requestAllocationAccountServicingParty)(SerializerXml.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current requestAllocationAccountServicingParty object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an requestAllocationAccountServicingParty object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output requestAllocationAccountServicingParty object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out requestAllocationAccountServicingParty obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAccountServicingParty);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out requestAllocationAccountServicingParty obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static requestAllocationAccountServicingParty LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAccountServicingParty object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string SerializeBson()
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, this);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAccountServicingParty object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAccountServicingParty object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out requestAllocationAccountServicingParty obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAccountServicingParty);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out requestAllocationAccountServicingParty obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static requestAllocationAccountServicingParty DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<requestAllocationAccountServicingParty>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileBson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAccountServicingParty LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeBson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current requestAllocationAccountServicingParty object into an json string
        /// </summary>
        public virtual string SerializeJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.SerializeObject(this, settings);
        }

        /// <summary>
        /// Deserializes requestAllocationAccountServicingParty object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAccountServicingParty object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeJson(string input, out requestAllocationAccountServicingParty obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAccountServicingParty);
            try
            {
                obj = DeserializeJson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeJson(string input, out requestAllocationAccountServicingParty obj)
        {
            Exception exception = null;
            return DeserializeJson(input, out obj, out exception);
        }

        public static requestAllocationAccountServicingParty DeserializeJson(string input)
        {
            JsonSerializerSettings settings = new JsonSerializerSettings();
            return JsonConvert.DeserializeObject<requestAllocationAccountServicingParty>(input, settings);
        }
        #endregion

        public virtual void SaveToFileJson(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeJson();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static requestAllocationAccountServicingParty LoadFromFileJson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return DeserializeJson(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize current requestAllocationAccountServicingParty object to msgpack
        /// </summary>
        /// <returns>string binary value</returns>
        public virtual byte[] SerializeMsgPack()
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream();
                SerializerMsPack.Pack(byteStream, this);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes requestAllocationAccountServicingParty object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output requestAllocationAccountServicingParty object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAccountServicingParty obj, out Exception exception)
        {
            exception = null;
            obj = default(requestAllocationAccountServicingParty);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out requestAllocationAccountServicingParty obj)
        {
            Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current requestAllocationAccountServicingParty object
        /// </summary>
        public static requestAllocationAccountServicingParty DeserializeMsgPack(byte[] input)
        {
            MemoryStream byteStream = null;
            try
            {
                byteStream = new MemoryStream(input);
                return ((requestAllocationAccountServicingParty)(SerializerMsPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public virtual void SaveToFileMsgPack(string fileName)
        {
            FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack();
                fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static requestAllocationAccountServicingParty LoadFromFileMsgPack(string fileName)
        {
            FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
